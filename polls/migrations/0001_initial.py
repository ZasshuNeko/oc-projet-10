# -*- coding: utf-8 -*-
# Generated by Django 3.0.6 on 2020-05-25 06:46

import django.db.models.deletion
from django.db import migrations, models, connection, transaction
from django.core.exceptions import ObjectDoesNotExist
from django.conf import settings

import requests
import json
import io
import os


def maj_bdd(apps, schema_editor):
    chemin = os.getcwd()
    with io.open(chemin + '\\polls\\migrations\\config\\fichier.txt',mode='r',encoding='utf-8') as f_read:
        fichier = f_read.read()
    with io.open(chemin + '\\polls\\migrations\\config\\field.txt',mode='r',encoding='utf-8') as f_field:
        field = f_field.read()
    with io.open(chemin + '\\polls\\migrations\\config\\tbl_cat.txt',mode='r',encoding='utf-8') as f_cat:
        cat_tbl = f_cat.read()
    dico = {}
    nw_liste = []
    liste_id = []
    liste_cat = fichier.split(',')
    liste_field = field.split(',')
    liste_tbl_cat = cat_tbl.split(",")
    for cat in liste_cat:
        print(cat)
        url = "https://fr.openfoodfacts.org/cgi/search.pl?"
        playload = {
            'action': 'process',
            'tagtype_0':'categories',
            'tage_contains_0':'contains',
            'tag_0': cat,
            'page_size':'90',
            'json' : 'true'
        }
        headers = {}
        #reponse = requests.request("GET",url,headers=headers, params=playload)
        reponse = requests.get(url,params=playload)
        f = reponse.json()
        for dic in f['products']:
            if len(dic['product_name']) > 0:
                dico = {}
                dico_construc = {}
                if dic['_id'] not in liste_id:
                    for key, valeur in dic.items():
                        if key in liste_field:
                            dico[key] = valeur
                            if key == '_id':
                                liste_id.append(valeur)

                #cle_dico = "produit" + str(x)
                #dico_construc[cle_dico] = dico
                if len(dic) != 0:
                    nw_liste.append(dico)
                #x += 1

    #with open('C:\\Users\\Admin\\Documents\\Projet_8\\OCprojetHuit\\polls\\templates\\fichier.json','w') as f_write:
        #json.dump(f['products'][5],f_write)
    Produits = apps.get_model('polls', 'Produits')
    Vendeurs = apps.get_model('polls', 'Vendeurs')
    Nutriments = apps.get_model('polls', 'Nutriments')
    Categorie = apps.get_model('polls', 'Categories')

    for cat in liste_tbl_cat:
        Categorie.objects.create(nom=cat)

    for item in nw_liste:
        with connection.cursor() as cursor:
            brand = item.get("brands_tags")
            if brand:
                if len(brand) > 1:
                    brand = " ".join(brand)
                else:
                    brand = brand[0]
            else:
                brand = ''

            cat_produit = item.get('categories')
            try:
                liste_cat_produit = cat_produit.split(',')

                liste_nutriment = item.get("nutriments")
                if len(item) != 0:
                    nw_produit = Produits.objects.create(ingredient=item.get("ingredients_text"),url_image_ingredients=item.get("image_ingredients_url"),brands_tags=brand,grade=liste_nutriment.get("nutrition-score-fr_100g"),image_front_url=item.get("image_front_url"),image_nutrition_url=item.get("image_nutrition_url"),nova_groups=item.get("nova_groups"),generic_name_fr=item.get("product_name"),url_site=item.get("url"),ingredients_text_fr=item.get("ingredients_text_fr"),_id=item.get("_id"))
                    nw_produit.save()
                    for cat_produits in liste_cat_produit:
                        list_cat_op = cat_produits.split(',')
                        ensble1 = set(list_cat_op)
                        ensble2 = set(liste_tbl_cat)
                        ensemble = ensble1 & ensble2
                        if len(list(ensemble)) > 0:
                            cat_op = list(ensemble)
                            try:
                                object_cat = Categorie.objects.get(nom__exact=cat_op[0])
                                object_cat.save()
                                id_cat = object_cat.id
                                object_cat.produit.add(nw_produit)
                            except Categorie.DoesNotExist:
                                b = cat_produit, '+++++++++++'

                    for stores in item.get("stores_tags"):
                        Vendeurs.objects.create(produits=nw_produit,nom=stores)

                    for cle,valeur in liste_nutriment.items():
                        unit = ""
                        val_100 = 0
                        label = ""
                        if cle.find("_label") == -1:
                            if cle.find("_unit") != -1:
                                unit = liste_nutriment.get(cle)
                                label = cle.split('_')
                                label = label[0]
                            elif cle.find("_100g") != -1:
                                val_100 = liste_nutriment.get(cle)
                                label = cle.split('_')
                                label = label[0]

                            if len(unit) != 0 or len(str(val_100)) != 0:
                                Nutriments.objects.create(produits=nw_produit,nom=label,unite=unit,valeur=val_100)
                                unit = ""
                                val_100 = 0
            except AttributeError:
                a = "cat vide"


class Migration(migrations.Migration):

    initial = True
    
    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Produits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.CharField(max_length=5024)),
                ('url_image_ingredients', models.URLField(max_length=5024,null=True)),
                ('brands_tags', models.CharField(max_length=500)),
                ('grade', models.CharField(max_length=500, blank=True, null=True)),
                ('image_front_url', models.URLField(max_length=5024,null=True)),
                ('image_nutrition_url', models.URLField(max_length=5024,null=True)),
                ('nova_groups', models.CharField(max_length=500, null=True)),
                ('generic_name_fr', models.CharField(max_length=500)),
                ('url_site', models.URLField(max_length=5024)),
                ('ingredients_text_fr', models.CharField(max_length=5024)),
                ('_id', models.FloatField()),

            ],
            options={
                'db_table':'polls_produits',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=5024)),
                ('produit', models.ManyToManyField('Produits')),

            ],
            options={
                'db_table':'polls_categories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Vendeurs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produits', models.ForeignKey('Produits', on_delete=models.CASCADE)),
                ('nom', models.CharField(max_length=300)),
            ],
            options={
                'db_table':'polls_vendeurs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Nutriments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produits', models.ForeignKey('Produits', on_delete=models.CASCADE)),
                ('nom', models.CharField(max_length=5000)),
                ('unite', models.CharField(max_length=10)),
                ('valeur',models.FloatField())
            ],
            options={
                'db_table':'polls_nutriments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Favoris',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
                ('produits', models.ForeignKey('Produits', on_delete=models.CASCADE)),
                ('date_ajout', models.DateField(auto_now_add=True)),
                ('aff_index', models.BooleanField()),
            ],
            options={
                'db_table':'polls_favoris',
                'managed': True,
            },
        ),
        migrations.RunPython(maj_bdd),
    ]

