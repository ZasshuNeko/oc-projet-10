# -*- coding: utf-8 -*-
# Generated by Django 3.0.6 on 2020-05-25 06:46

import django.db.models.deletion
from django.db import migrations, models, connection, transaction

import requests
import json
import io
import os


def maj_bdd(apps, schema_editor):
    chemin = os.getcwd()
    with io.open(chemin + '\\polls\\migrations\\config\\fichier.txt',mode='r',encoding='utf-8') as f_read:
        fichier = f_read.read()
    with io.open(chemin + '\\polls\\migrations\\config\\field.txt',mode='r',encoding='utf-8') as f_field:
        field = f_field.read()
    dico = {}
    #dico_construc = {}
    nw_liste = []
    #liste_id = []

    liste_cat = fichier.split(',')
    liste_field = field.split(',')
    for cat in liste_cat:
        print(cat)
        url = "https://fr.openfoodfacts.org/cgi/search.pl?"
        playload = {
            'action': 'process',
            'tagtype_0':'categories',
            'tage_contains_0':'contains',
            'tag_0': cat,
            'sort_by':'unique_scans_n',
            'json' : 'true'
        }
        headers = {}
        #reponse = requests.request("GET",url,headers=headers, params=playload)
        reponse = requests.get(url,params=playload)
        f = reponse.json()
        for dic in f['products']:
            dico = {}
            dico_construc = {}
            for key, valeur in dic.items():
                if key in liste_field:
                    dico[key] = valeur

            #cle_dico = "produit" + str(x)
            #dico_construc[cle_dico] = dico
            nw_liste.append(dico)
            #x += 1

    #with open('C:\\Users\\Admin\\Documents\\Projet_8\\OCprojetHuit\\polls\\templates\\fichier.json','w') as f_write:
        #json.dump(nw_liste,f_write)
    Produits = apps.get_model('OCprojetHuit', 'Produits')
    Vendeurs = apps.get_model('OCprojetHuit', 'Vendeurs')
    Nutriments = apps.get_model('OCprojetHuit', 'Nutriments')
    for item in nw_liste:
        with connection.cursor() as cursor:
            brand = item.get("brands_tags")
            brand = brand[0]
            #cursor.execute("INSERT INTO tbl_produits(ingredient,url_image_ingredients,brands_tags,grade,image_front_url,image_nutrition_url,nova_groups,generic_name_fr,url_site,ingredients_text_fr,_id) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(item.get("ingredients_text"),item.get("image_ingredients_url"),brand,item.get("grade"),item.get("image_front_url"),item.get("image_nutrition_url"),item.get("nova_groups"),item.get("generic_name_fr"),item.get("url"),item.get("ingredients_text_fr"),item.get("_id")))
            nw_produit = Produits.objects.create(ingredient=item.get("ingredients_text"),url_image_ingredients=item.get("image_ingredients_url"),brands_tags=brand,grade=item.get("grade"),image_front_url=item.get("image_front_url"),image_nutrition_url=item.get("image_nutrition_url"),nova_groups=item.get("nova_groups"),generic_name_fr=item.get("generic_name_fr"),url_site=item.get("url"),ingredients_text_fr=item.get("ingredients_text_fr"),_id=item.get("_id"))
            #last_id = cursor.execute("SELECT MAX(id) FROM tbl_produits;")#CURRVAL(pg_get_serial_sequence('tbl_produits','id'));")
            for stores in item.get("stores_tags"):
                Vendeurs.objects.create(produits=nw_produit,nom=stores)
                #cursor.execute("INSERT INTO tbl_vendeurs(produits,nom) VALUES (%s,%s)",(last_id,stores))
            liste_nutriment = item.get("nutriments") 
            for cle,valeur in liste_nutriment.items():
                if cle.find('_label'):
                    label_liste = cle.split('_')
                    label = label_liste[0]
                    for key_nut,val_nut in liste_nutriment.items():
                        if key_nut.find(label) != -1 and key_nut.find("_label") == -1:
                            if key_nut.find("_unit") != -1:
                                unit = liste_nutriment.get(key_nut)
                            elif key_nut.find("_100g") != -1:
                                val_100 = liste_nutriment.get(key_nut)
                Nutriments.objects.create(produits=nw_produit,nom=label,unite=unit,valeur=val_100)
                #cursor.execute("INSERT INTO tbl_nutriments(produits,nom,unite,valeur) VALUES (%s,%s,%s,%s)",(last_id,label,unit,val_100))


class Migration(migrations.Migration):

    initial = True
    
    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Produits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.CharField(max_length=5024)),
                ('url_image_ingredients', models.URLField()),
                ('brands_tags', models.CharField(max_length=500)),
                ('grade', models.CharField(max_length=500, blank=True, null=True)),
                ('image_front_url', models.URLField()),
                ('image_nutrition_url', models.URLField()),
                ('nova_groups', models.CharField(max_length=500, null=True)),
                ('generic_name_fr', models.CharField(max_length=500)),
                ('url_site', models.URLField()),
                ('ingredients_text_fr', models.CharField(max_length=5024)),
                ('_id', models.FloatField()),

            ],
            options={
                'db_table':'tbl_produits',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Vendeurs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produits', models.ForeignKey('Produits', on_delete=models.CASCADE)),
                ('nom', models.CharField(max_length=300)),
            ],
            options={
                'db_table':'tbl_vendeurs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Nutriments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produits', models.ForeignKey('Produits', on_delete=models.CASCADE)),
                ('nom', models.CharField(max_length=200)),
                ('unite', models.CharField(max_length=10)),
                ('valeur',models.FloatField())
            ],
            options={
                'db_table':'tbl_nutriments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Favoris',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produits', models.ForeignKey('Produits', on_delete=models.CASCADE)),
                ('date_ajout', models.DateField(auto_now_add=True)),
                ('aff_index', models.BooleanField()),
            ],
            options={
                'db_table':'tbl_favoris',
                'managed': True,
            },
        ),
        migrations.RunPython(maj_bdd),
    ]

